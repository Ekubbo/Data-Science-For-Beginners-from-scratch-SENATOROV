"""[TASK] issues."""

# 1. Что такое Issues на GitHub и для чего они используются?
#     - это встроенный инструмент для отслеживания задач, ошибок, предложений и других обсуждений, связанных с проектом
# 2. Чем Issues отличаются от других инструментов управления задачами?
#     - Issues максимально интегрированы с репозиторием: их можно привязывать к коммитам, pull requests и веткам, при закрытии pull request можно автоматически закрыть связанный Issue (Closes #номер)
# 3. Какие основные компоненты (поля) есть у каждого Issue?
#     - Title
#     - Description
# 4. Как создать новое Issue в репозитории?
#     - Открыть репозиторий
#     - Перейти на вкладку "Issues"
#     - Нажать на кнопку "New issue"
#     - Заполнить "Title" и "Description" поля
#     - Нажать на кнопку "Create"
# 5. Какие данные рекомендуется указывать в описании Issue для лучшего понимания задачи?
#     - Участки кода
#     - Краткое резюме
#     - Шаги для воспроизведения (для багов)
#     - Предложения по решению (если есть)
# 6. Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
#     - можно создавать любые теги
#     - bug, duplicate, enhancement, help wanted, good first issue, invalid, question, wontfix
# 7. Как прикрепить Assignees (ответственных) к Issue?
#     - Перейди на страницу нужного Issue в репозитории.
#     - Нажми на поле Assignees, откроется список участников репозитория
#     - Выбрать одного или нескольких пользователей
# 8. Как использовать Labels для классификации задач?
#     - Метки можно использовать для фильтрации: is:open label:bug покажет все открытые баги
#     - Чтобы добавить: Открой Issue > В правой панели найди поле Labels > Нажать и выбери одну или несколько меток из списка
# 9. Для чего нужен Milestone, и как связать его с Issue?
#     - цель/этап, объединяющий задачи
# 10. Как привязать Issue к пул-реквесту (Pull Request)?
#     - Открыть PR
#     - Выбрать нужный milestone в соответствующем поле(в правой панели)
# 11. Как добавить комментарий к существующему Issue?
#     - Открыть нужный Issue
#     - Внизу есть поле ввода для комментарий, заполнить его
#     - Нажать на кнопку "Comment"
# 12. Как закрыть Issue вручную?
#     - Открыть нужный Issue
#     - Нажать на кнопку "Close issue"
# 13. Можно ли автоматически закрыть Issue с помощью сообщения в коммите или пул-реквесте? Как это сделать?
#     - Да
#     - Добавить в описании Closes #{Номер Issue}
# 14. Как повторно открыть закрытое Issue, если работа ещё не завершена?
#     - Открыть нужный Issue(можно найти в разделе "Closed")
#     - Нажат ьна кнопку "Reopen issue"
# 15. Как найти все открытые или закрытые Issues в репозитории?
#     - Открыть нужный репозиторий
#     - Открыть вкладку Issues
#     - Далее можно выбрать раздел "Open" или "Closed"
# 16. Как использовать фильтры для поиска Issues по меткам, исполнителям или другим критериям?
#     - Открыть вкладку Issues в репозитории
#     - В строке поиска использовать фильтры:
#         - `is:open` или `is:closed` — открытые или закрытые Issues
#         - `label:<название_лейбла>` — по конкретной метке
#         - `assignee:<имя_пользователя>` — по исполнителю
#         - `author:<имя_пользователя>` — по автору
#         - `milestone:<название>` — по milestone
# 17. Как сортировать Issues по приоритету, дате создания или другим параметрам?
#     - На странице Issues есть меню сортировки (Sort), находится справа
#     - Выбрать нужный вариант: "Created on", "Last updated", "Total comments", "Best match"
# 18. Как настроить автоматические уведомления о новых или изменённых Issues?
#     - Подписаться на репозиторий кнопкой **“Watch”** в правом верхнем углу
#     - Выбрать тип уведомлений Custom
#     - Выбрать "Issues"
#     - Нажать Apply
# 19. Что такое Projects в контексте GitHub, и как связать их с Issues?
#     - Это доски для управления задачами
#     - Открыть Issues, выбрать нужный Projects в соответствующем поле справа
# 20. Какие сторонние инструменты можно использовать для автоматизации работы с Issues (например, боты, Webhooks)?
#     - Probot
#     - Webhooks
#     - GitHub Actions
#     - Jira
# 21. Как упомянуть другого пользователя в комментарии к Issue?
#     - В комментарии написать `@` и имя пользователя, например `@username`
# 22. Как запросить дополнительные данные или уточнения у автора Issue?
#     - Запросить в чате телеграм или в комментарии к Issue
# 23. Что делать, если Issue неактуально или его нужно объединить с другим?
#     - Если Issue больше не актуально — закрыть его с комментарием, объясняющим причину
#     - Если Issue дублирует другой — закрыть как дубликат и в комментарии указать ссылку на основной Issue
#     - При объединении нескольких Issues можно в комментариях всех связанных ссылаться на основной Issue
# 24. Как использовать шаблоны для создания Issues?
#     - Репозиторий может содержать "шаблоны Issues" в `.github/ISSUE_TEMPLATE/`
#     - При создании нового Issue GitHub предложит выбрать шаблон
# 25. Что такое Linked Issues, и как создать связь между задачами?
#     - Открыть Issue
#     - Нажать на стрелку рядом с "Create sub-issue"
#     - Выбрать Add existing issue
# 26. Какие метрики (например, время выполнения) можно отслеживать с помощью Issues?
#     - Время открытия и закрытия Issue — позволяет оценить скорость выполнения задач
#     - Количество комментариев — показатель активности обсуждения или сложности задачи
#     - Количество правок/обновлений — помогает понять, сколько раз менялись требования или статус
#     - Исполнители и участники — кто отвечает за выполнение и кто участвует в обсуждении
#     - Используемые метки и приоритеты — анализ распределения задач по категориям и срочности
#     - Можно строить отчёты и графики на основе этих данных для оценки эффективности работы команды
# 27. Какие best practices рекомендуются при работе с Issues в команде?
#     - Давать чёткие заголовки и описания
#     - Вести обсуждение в комментариях
#     - Закрывать дубликаты с ссылкой на основное Issue
#     - Использовать метки и milestones
#     - Регулярно обновлять статус и прогресс задачи
#     - Упоминать связанные PR и коммиты
