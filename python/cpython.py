"""SENATOROVAI/intro-cs/issues/4."""

# 1. Что такое CPython и чем он отличается от Python?
#     - CPython — это реализация языка Python, написанная на C
# 3. Сколько существует реализаций Python, и какая из них самая популярная?
#     - Существует как минимум 6 реализаций языка Python
#     - CPython самая популярная
# 4. На каком языке написан CPython?
#     - CPython написан на си
# 5. (опционально) Кто создал CPython?
#     - CPython создал Гвидо ван Россум
# 6. Почему Python считается быстрым, несмотря на то, что это интерпретируемый язык?
#     - CPython позволяет запускать быстрый код написанный на си
# 7. Напишите путь к Интерпретатору CPython на вашем компьютере
# ```
# % which python
# /opt/anaconda3/bin/python
# ```
# 8. Что содержится в папке include в CPython?
#     - заголовочные файлы C (C header files)
# 9. Где можно найти исходный код CPython дайте ссылку на репозиторий гитхаб
#     - https://github.com/python/cpython
# 10. (опционально) Как работает интерпретатор CPython при выполнении кода?
#     - Лексический анализ (токенизация)
#     - Синтаксический анализ (построение AST)
#     - Генерация байт-кода
#     - Байт-кода выполняется построчно на си
# 11. Какая команда используется для запуска файла с помощью CPython?
#     - python file.py
# 12. Можно ли запускать текстовые файлы через интерпретатор Python? Почему?
#     - Да, можно, потому что интерпретатор анализирует содержимое файла, а не его расширение
# 13. Как указать путь к интерпретатору и файлу для выполнения кода?
# ```
# % echo "print(1)" > 1
# % /opt/anaconda3/bin/python 1
# 1
# ```
# 14. Чем PyPy отличается от CPython?
#     - PyPy использует JIT-компиляцию для оптимизации производительности, в отличие от интерпретатора CPython
# 15. Почему PyPy не может использоваться для всех проектов на Python?
#     - PyPy несовместим со многими C-расширениями и библиотеками, разработанными specifically для CPython
# 16. Где можно скачать PyPy?
#     - https://pypy.org/download.html
# 17. Как установить PyPy после скачивания?
#     - Распаковать архив
# 18. Как запустить файл с помощью PyPy?
# ```
# % /Users/aleksey/Downloads/pypy3.11-v7.3.20-macos_arm64/bin/python 1
# 1
# ```
# 19. Почему PyPy выполняет код быстрее, чем CPython?
#     - PyPy использует JIT-компиляцию, которая оптимизирует часто выполняемый код в машинные инструкции во время работы программы.
#
#
# ### Практические задания
#
# ##### Задание 1: Поиск и установка CPython
# Проверьте, установлен ли CPython на вашем компьютере:
#     Используйте поиск в меню "Пуск" (Windows) или терминале (Linux/Mac).
#     Введите команду python --version или python3 --version в терминале.
# Если CPython не установлен, скачайте его с официального сайта Python https://www.python.org/downloads/ и установите.
#
# ответ: Python 3.13.5
#
# ##### Задание 2: Исследование структуры CPython
# Найдите папку, где установлен Python (например, через команду which python в терминале или свойства ярлыка).
# Откройте папку include и изучите её содержимое. Какое количество файлов на C там есть?
# Перейдите на [GitHub-репозиторий CPython](https://github.com/python/cpython) и найдите файл README. Прочитайте информацию о проекте.
#
# ответ: 76
#
# ##### Задание 3: Запуск файла с помощью CPython
# Создайте текстовый файл example.txt с содержимым:
# print("Hello from CPython!")
#
# Запустите файл через команду python <путь_до_файла> (замените <путь_до_файла> на фактический путь к вашему файлу).
# Проверьте, что выводится на экран. Попробуйте изменить расширение файла на .py и повторите запуск.
#
# ответ:
# ```
# % echo "print(\"Hello from CPython\")" > example.txt
# % python example.txt
# Hello from CPython
# % echo "print(\"Hello from CPython\")" > example.py
# % python example.txt
# Hello from CPython
# ```
# ##### Задание 4: Установка и использование PyPy
# Перейдите на [официальный сайт PyPy](https://www.pypy.org/) и скачайте подходящую версию для вашей операционной системы.
# Распакуйте скачанный архив в удобное место.
# Создайте файл example_pypy.py с кодом:
#
# ответ:
# ```
# % echo "print(\"Hello from pypy\")" > example_pypy.py
# % /Users/aleksey/Downloads/pypy3.11-v7.3.20-macos_arm64/bin/python example_pypy.py
# Hello from pypy
# ```
#
# ##### Задание 5: Сравнение производительности CPython и PyPy.
# Создайте файл performance_test.py с кодом:
# ```
#     import time
#     start_time = time.time()
#     total = 0
#     for i in range(1, 10000000):
#         total += i
#     end_time = time.time()
#
#     print("Result:", total)
#     print("Execution time:", end_time - start_time, "seconds")
# ```
# Запустите этот файл сначала через CPython, а затем через PyPy. Запишите результаты времени выполнения для обоих интерпретаторов.
# Сделайте вывод о разнице в производительности.
#
# ответ:
# ```
# % /Users/aleksey/Downloads/pypy3.11-v7.3.20-macos_arm64/bin/python performance_test.py
# Result: 49999995000000
# Execution time: 0.0232999324798584 seconds
# % python performance_test.py
# Result: 49999995000000
# Execution time: 0.5019669532775879 seconds
# ```
# PyPy - быстрее примерно в 20 раз

#
