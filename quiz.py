"""https://github.com/SENATOROVAI/intro-cs/issues/6."""

# quiz1
#
# 1) Как понять, что домашка пришла?
#     - По сообщению прими пул в чате HomeWork
# 2) Как принять домашку?
#     - Нужно нажать fetch origin в github desktop
# 3) Зачем нужна кнопка history и какие функции появляются при нажатии правой кнопки мыши на коммит?
#     - History можно посмотреть историю изменений.
#     - При нажатии правой кнопки мыши на коммит появляются функции:
#         - Amend Commit - изменить последний коммит
#         - Restore to Commit - восстановить состояние файла/проекта до выбранного коммита
#         - Checkout Commit - перейти к выбранному коммиту
#         - Reorder Commit - изменить порядок коммитов
#         - Revert Changes in Commit - откатить изменения коммита
#         - Create Branch from Commit - создать новую ветку, начиная с выбранного коммита
#         - Create Tag - создать тег для коммита
#         - Copy SHA - скопировать SHA хеш коммита
#         - Copy tag - скопировать название тега
#         - View on GitHub - открыть коммит в GitHub.
# 3.1) Где брать ссылку на коммит? куда её отправлять?
#     - можно нажать на "View on GitHub", или найти на github
#     - в чат HomeWork
# 4) Что такое файл лога?
#     - Журнал учебной деятельности
# 4.1) Когда нужно его пушить?
#     - после выполнения задания
# 5) Что такое интерпритатор?
#     - программа, выполняющая код
# 6) Где можно выбрать интерпритатор?
#     - Ctrl + Shift + P, затем Python: Select Interpreter
# 7) Что такое модуль?
#     - файл с кодом на Python, который можно подключать и использовать в других программах
# 8) Как создать и отправить коммит?
#     - commit to main - push origin
# 9) Как посмотреть что коммит точно отправлен и находится в github?
#     - проверить на сайте github
# 10) Какая команда показывает что код не прошёл проверки на ошибки?
#     - pre-commit run --all-files
# 10.1) Напишите список линтеров которые используются для проверки кода и дайте их краткую характеристику.
#     - Black – автоформаттер кода по PEP8;
#     - Flake8 – проверка стиля и ошибок;
#     - Mypy – статическая проверка типов;
#     - nbqa-pydocstyle – проверка docstrings в Jupyter;
#     - Codespell – поиск опечаток;
#     - Pylint – линтер и анализатор кода.
# 11) Как узнать какой именно линтер не прошёл проверку?
#     - Failed указывает какой линтер не прошел проверку:
#     - nbqa-pydocstyle..........................................................Failed
# 12) Линтер Pylint видит markdown?
#     - нет
# 13) Номер ячейки в терминале и номер ячейки в vs code может отличаться? в каком случае?
#     - да, т.к. линтер пропускает markdown
# 14) Где посмотреть номер ячейки в vscode?
#     - внизу справа
# 15) В каком формате ipynb отправляется в гитхаб? причём здесь JSON?
#     - .ipynb - это обычный json файл:
# ```
# % head quiz.ipynb
# {
#  "cells": [
#   {
#    "cell_type": "code",
#    "execution_count": null,
#    "id": "35d8cf73",
#    "metadata": {
#     "vscode": {
#      "languageId": "plaintext"
#     }
# ```
# 16) Где посмотреть в какой ячейке ошибка?
#     - В ошибке терминала
# 17) Как запустить терминал?
#     - Cmd + Shift + U, затем терминал
# 18) Что такое линтер?
#     - Программа, которая проверяет код на соответствие правилам стиля, стандартам и потенциальным ошибкам
# 19) В какой сайт нужно вставлять код ошибки если ошибка связана с pylint?
#     - https://pylint.readthedocs.io/en/stable/
# 20) Секция pydocstyle в большинстве случае автоматический закрывается после исправления ошибок в каком линтере?
#     - pylint
# 21) Что такое описание модуля? Оно должно отражать информацию о том что находится в модуле?
#     - docstring в начале файла, которое кратко объясняет назначение модуля и что в нём содержится
# 21.1) С какой  git команды начинается утро программиста?
#     - git pull, git status
# 22) После внесения изменений в файлах, кнопка open in vs code пропадает в кошке, как по другому открыть vs code из кошки?
#     - Current Repository - Open In Visual Studio Code
# 23) Что такое stash?
#   Общее объяснение концепции.
#     - Позволяет сохранить текущие незакоммиченные изменения и вернуться к чистой рабочей копии
# 23.1) Как сохранить стэш?
#   git командa(подсказка: https://t.me/c/1937296927/3602/19531):
#     - git stash
#   Кнопка в vs code:
#     - CMD + SHIFT + P, затем git: Stash
# 23.2) Как восстановить стэш(подсказка: https://t.me/c/1937296927/3602/25747)?:
#     - git stash apply
#     - CMD + SHIFT + P, затем git: Apply Stash
#       git команда(подсказка: https://t.me/c/1937296927/3602/19531)?:
# 23.3) Различие между стэшем и коммитом.
#     - Стэш — временно откладывает незавершённые изменения, коммит — сохраняет завершённую работу в истории.
#   Когда лучше сохранить изменения в стэше, а когда коммитить.
#     - Cтэш стоит использовать при конфликтах с глобальной версией
# 23.4) Как просмотреть список сохраненных стэшей?
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#     - git stash list
# 23.5) Как удалить стэш?
#   Команды для удаления отдельных стэшей или всех сразу.
#   git команда (подсказка: https://t.me/c/1937296927/3602/19531):
#     - git stash drop
#     - git stash clear
# 23.6) Практические примеры использования стэша.
#   Краткие сценарии, где стэш помогает.
#     - git stash
#     - git pull
#     - git stash pop
#
# 24) Где посмотреть что есть конфликт в файлах?
#     - в github desktop напротив файла знак восклицания
# 24.1) Когда он появляется?
#     - Конфликт возникает, когда локальные изменения и изменения из удалённого репозитория затрагивают одни и те же строки в файле
# 25) Как решить конфликт в файлах?
#     - Открыть файл с конфликтом, Найти маркеры конфликта, выбрать правильный вариант или объединить вручную
# 26) Напишиие правильное утверждение
#     - Зелёное — локальные изменения, синее — то, что пришло с гитхаба.
# 27) Если мы работаем в одном файле, можно ли принять pull после того как вы спрячете в стэш свои изменения?
#     - Да
# 27.1) Что может произойти когда stash восстановите после принятия pull?
#     - Могут возникнуть конфликты, если изменения из stash и изменения, полученные с репозитория, затрагивают одни и те же строки.
#     - Придётся решать конфликт
# 28) Сколько способов решения конфликтов было показано в видео? Напишите ЧИСЛО и укажите их способы.
#     - Accept Current Change
#     - Accept Incoming Change
#     - Accept Both Changes
#     - Resolve manually
# 29) Что делает кнопка complete merge?
#     - Завершает процесс слияния после того, как все конфликты разрешены, и создаёт финальный коммит слияния.
# 30) В какой чат нужно писать если остались вопросы?
#     - help me
# 31) Что такое FORK? Зачем его делают?
#     - FORK в GitHub — это копия чужого репозитория в ваш аккаунт
# 32) Как скачать форкнутый репозиторий на локальный компьютер?
#     - git clone <FORK_URL>
# 33) С какой вероятностью ваши ошибки были уже решены? и кто их решил?
#     - 99%. Преподаватель или студенты
# 34) Как создать файл в vs code?
#     - File - New file
# 35) Файл лога нужно заполнять в конце каждого урока?
#     - Да
# ==================
#
# Дополнительные вопросы:
# 1)Какая команда конвертирует файл в py из ipynb?
#     - jupytext --to py $(git ls-files '*.ipynb')
# подсказка https://t.me/c/1937296927/1/26527
# 2) Что такое пакетный менеджер? Вы пользуетесь пакетным менеджером conda или pip? Какой лучше использовать для дата сайнс?
#     - Пакетный менеджер — инструмент для установки, обновления и управления библиотеками и зависимостями.
#     - Примеры: pip и conda.
#     - Для Data Science лучше использовать conda, так как удобно работать с научными библиотеками и бинарными зависимостями.
# 3) Почему расширение py лучше чем ipynb?
#     - .py проще для версионирования в Git, тестирования и использования в IDE или продакшене.
#     - .ipynb удобен для интерактивных экспериментов, но сложнее в совместной работе и автоматизации.
# 4) Что такое pep8?
#     - PEP8 — это стандарт стиля кода Python
# подсказка:https://peps.python.org/pep-0008/
# 4.1) линтеры проверяют на соблюдение pep8?
#     - Да
# 4.2) Какая нотация используется для создания переменных?
#     - snake_case
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676
# 4.3) Может ли переменная состоять из одной буквы например андерскор  "_" ?
#     - Да
# 4.4) Зачем и где мы используем андерскор _
#     - как временная переменная, которую не планируем использовать
# 4.5) По PEP8 допустима переменная в одну букву?
#     - Да, для временных/локальных переменных в коротких циклах допустимо
# ответ на 85-95 страницы https://t.me/c/1937296927/1/16676

# quiz2
#
# 1. Как включить автосохранение данных в VSCODE?
#     - File - Auto Save
# 2. Как настроить перенос строки?
#     - File - Preferences - Settings - wrap - wordWrapColumn
# 3. Сколько символов по pep8 разрешено на строке?
#     - 79
# 4. Какие способы переноса строк показаны в видео:
#     - Скобки 4.4
#     - Конкатенация строк 4.6
#
# 4.1 Строки с использованием обратного слэша (\)
#
# string_continued = "This is a long string that we want to " \
#                    "split across multiple lines."
# print(string_continued)
#
# 4.2 Тройные кавычки (''' или """)
#
# multi_line_string = """This is a string that spans
# multiple lines. You can write freely
# and it will keep the line breaks."""
# print(multi_line_string)
#
# 4.3 Создание списка строк и объединение с помощью join
#
# strings = [
#     "This is the first line.",
#     "This is the second line.",
#     "This is the third line."
# ]
# result = "\n".join(strings)  # Используем перенос строк '\n'
# print(result)
#
# 4.4 Использование круглых скобок для продолжения строки
# long_string = (
#     "This is a very long string that I would like to "
#     "continue on the next line."
# )
# print(long_string)
#
# 4.5 Форматированные строки (f-строки) с использованием скобок
# letter_a = 5
# letter_b = 6
# product_ab = letter_a * letter_b
#
# message = (
#     f"when {letter_a} is multiplied by {letter_b}, "
#     f"the result is {product_ab}"
# )
# print(message)
#
# 4.6 Сложение строк с помощью +
#
# string_part1 = "This is the first part, "
# string_part2 = "and this is the second part."
# full_string = string_part1 + string_part2
# print(full_string)
#
# 5. Проверка на ошибки c помощью кнопки problems, где она находится?
#     - в нижней панели(cmd + shift + u)
# 6. Где в vscode находится клиент гита? как в нём отправить коммит? как принять домашку?
#     - Вкладка Git: слева в боковой панели (значок с веткой)
#     - Отправка коммита
#         - Сделать изменения.
#         - Ввести сообщение коммита в поле.
#         - Нажать ✔ Commit.
#     - Принять домашку / изменения из репозитория
#         - Нажать Pull в панели Git
# 7. Что такое GIT? он локальный? В нём можно посмотреть историю изменений файлов и вернуться к любому коммиту?
#     - система контроля версий
#     - да
#     - да
# 8. Как вставить картинку в маркдаун?
#     - cmd + v
# 9. Где посмотреть длину строки в vs code?
#     - Внизу на строке состояния
# 10. Как поменять тип ячейки с питона на маркдаун?
#     - справа внизу ячейки
# 11. Как запустить сразу все ячейки в юпитере?
#     - Run all наверху
# 12. Как изменить размер картинки в юпитере? Нужно для этого знать HTML?
#     - через html: <img src="ссылка" width="200">
#     - да
# 13. Какой хоткей чтобы запустить ячейку с смещением на следующую?
#     - Shift + Enter
# 14. Как включить отображение номеров строк в юпитере(Cell line numbers)?
#     - Show cell line numbers
# 15. Что такое "Go To" чем это полезно? Как перейти сразу на ошибочную ячейку?
#     - Перейти на ячейку с ошибкой
#     - Нажать на "Go To"
# 16. Как очистить вывод ячеек которые уже запущены?
#     - Clear all outputs
# 17. Как работать одновременно в нескольких файлах в VSCODE? Что такое SPLIT?
#     - Split edit
#     - это функция разделения окна редактора на несколько панелей
# 18. Каким сочетанием убирается левый сайдбар?
#     - Ctrl+ B
# 19. Кнопка два листочка это наши локальные файлы?
#     - Да
# 20. Какая ошибка появилась в трассировке при запуске всех ячеек DICT или LIST?
#     - Name 'Dict' in not defined
# 21. Вы ознакомились с https://t.me/c/1937296927/832/19307? и  https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet?
#     - Да
# 22. Что такое валидация?
#     - Проверка данных на корректность, соответствие формату или правилам
# 23. Что такое трассировка ошибки?
#     - вывод Python с информацией, где и какая ошибка произошла, включая цепочку вызовов функций
# 24. Что значит отвалился интерпритатор?
#     - Интерпретатор Python аварийно завершился из-за ошибки
#
